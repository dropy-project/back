datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum MediaType {
  NONE
  TEXT
  PICTURE
  VIDEO
  MUSIC
}

enum Pronouns {
  UNKOWN
  HE_HIM
  SHE_HER
}

model User {
  id  Int    @id @default(autoincrement())
  uid String @unique

  registerDate DateTime @default(now())
  deviceToken  String?

  email       String?
  password    String?

  username     String   @unique
  displayName  String

  avatarUrl String?
  pronouns    Pronouns @default(UNKOWN)
  about       String?

  isDeveloper Boolean @default(false)
  isAdmin   Boolean @default(false)
  isAmbassador Boolean @default(false)
  isPremium Boolean @default(false)
  isBanned Boolean @default(false)

  emittedDropies   Dropy[] @relation("emittedDropies")
  retrievedDropies Dropy[] @relation("retrievedDropies")

  lastGeolocationPingDate              DateTime? 
  lastGeolocationPingLatitude  Float?  
  lastGeolocationPingLongitude Float?    
  
  isOnline Boolean @default(false)
  conversations ChatConversation[]
  chatMessages  ChatMessage[]

  emittedReports Report[] @relation("sentReports")
  receivedReports Report[] @relation("receivedReports")

  blockedUsers User[] @relation("blockedUsers")
  blockedByUsers User[] @relation("blockedUsers")
}

model Dropy {
  id           Int      @id @default(autoincrement())
  creationDate DateTime @default(now())

  emitter   User @relation("emittedDropies", fields: [emitterId], references: [id], map: "emitterId")
  emitterId Int

  retrieverId  Int?
  retriever    User?     @relation("retrievedDropies", fields: [retrieverId], references: [id], map: "retrieverId")
  retrieveDate DateTime?

  latitude  Float
  longitude Float

  filePath  String?
  mediaData String?
  mediaType MediaType @default(NONE)

  chatConversation   ChatConversation? @relation(fields: [chatConversationId], references: [id])
  chatConversationId Int?

  chatMessage        ChatMessage[]
}

model ChatConversation {
  id           Int      @id @default(autoincrement())
  creationDate DateTime @default(now())
  closed       Boolean  @default(false)

  users User[]

  dropies Dropy[]

  messages ChatMessage[]
}

model ChatMessage {
  id   Int      @id @default(autoincrement())
  date DateTime @default(now())

  conversation   ChatConversation @relation(fields: [conversationId], references: [id])
  conversationId Int

  sender   User @relation(fields: [senderId], references: [id])
  senderId Int

  content String?
  dropy   Dropy?  @relation(fields: [dropyId], references: [id])

  read    Boolean @default(false)
  dropyId Int?
}

model Report {
  id           Int      @id @default(autoincrement())

  sender   User @relation("sentReports", fields: [senderId], references: [id])
  senderId Int
  reported User @relation("receivedReports", fields: [reportedId], references: [id])
  reportedId Int

  date DateTime @default(now())
}